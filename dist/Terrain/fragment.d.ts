declare const Fragment = "\nuniform float uScale;\nuniform sampler2D uHeightData;\n\nvarying float vMorphFactor;\nvarying vec3 vNormal;\nvarying vec3 vPosition;\n\nfloat getHeight(vec3 p) {\n  // Assume a 1024x1024 world\n  vec2 st = p.xy / 1024.0;\n\n  // Sample multiple times to get more detail out of map\n  float h = 1024.0 * texture2D(uHeightData, st).r;\n  h += 64.0 * texture2D(uHeightData, 16.0 * st).r;\n  h += 4.0 * texture2D(uHeightData, 256.0 * st).r;\n\n  // Square the height, leads to more rocky looking terrain\n  return h * h / 2000.0;\n}\n\nvec3 colorForScale(float scale) {\n  if ( scale > 32.0 ) {\n    scale /= 32.0;\n  }\n  if ( scale <= 1.0 ) {\n    return vec3(1.0, 0, 0);\n  } else if ( scale <= 2.0 ) {\n    return vec3(0, 1.0, 0);\n  } else if ( scale <= 4.0 ) {\n    return vec3(0, 0, 1.0);\n  } else if ( scale <= 8.0 ) {\n    return vec3(1.0, 1.0, 0);\n  } else if ( scale <= 16.0 ) {\n    return vec3(1.0, 0, 1.0);\n  } else if ( scale <= 32.0 ) {\n    return vec3(1.0, 1.0, 1.0);\n  }\n\n  // Shouldn't happen\n  return vec3(0, 0, 0);\n}\n\nvec3 getNormal() {\n  // Differentiate the position vector (this will give us two vectors perpendicular to the surface)\n  // Before differentiating, add the displacement based on the height from the height map. By doing this\n  // calculation here, rather than in the vertex shader, we get a per-fragment calculated normal, rather\n  // than a per-vertex normal. This improves the look of distant low-vertex terrain.\n  float height = getHeight( vPosition );\n  vec3 p = vec3( vPosition.xy, height );\n  vec3 dPositiondx = dFdx(p);\n  vec3 dPositiondy = dFdy(p);\n\n  // The normal is the cross product of the differentials\n  return normalize(cross(dPositiondx, dPositiondy));\n}\n\n\nvoid main() {\n  vec3 light = vec3(80.0, 150.0, 50.0);\n  vec3 color = vec3(0.27, 0.27, 0.27);\n  vec3 normal = getNormal();\n\n  float incidence = dot(normalize(light - vPosition), normal);\n  incidence = clamp(incidence, 0.0, 1.0);\n  incidence = pow(incidence, 0.02);\n  color = mix(vec3(0, 0, 0), color, incidence);\n\n  vec3 halfVector = normalize(normalize(cameraPosition - vPosition) + normalize(light - vPosition));\n  float specular = dot(normal, halfVector);\n  specular = max(0.0, specular);\n  specular = pow(specular, 25.0);\n  color = mix(color, vec3(0, 1.0, 0.0), 0.5 * specular);\n\n  vec3 light2 = vec3(420.0, 510.0, 30.0);\n  halfVector = normalize(normalize(cameraPosition - vPosition) + normalize(light2 - vPosition));\n  specular = dot(normal, halfVector);\n  specular = max(0.0, specular);\n  specular = pow(specular, 3.0);\n  color = mix(color, vec3(0.3, 0.3, 0.3), 0.5 * specular);\n\n  vec3 light3 = vec3(0.0, 0.0, 1000.0);\n  halfVector = normalize(normalize(cameraPosition - vPosition) + normalize(light3 - vPosition));\n  specular = dot(normal, halfVector);\n  specular = max(0.0, specular);\n  specular = pow(specular, 130.0);\n  color = mix(color, vec3(1.0, 0.5, 0), specular);\n\n  float fogFactor = clamp( 1.0 - vPosition.z / 25.0, 0.0, 1.0 );\n  fogFactor = pow( fogFactor, 5.4 );\n  color = mix( color, vec3( 0.0, 0.9, 0.0 ), fogFactor );\n\n  float depth = gl_FragCoord.z / gl_FragCoord.w;\n  fogFactor = smoothstep( 300.0, 1000.0, depth );\n  //fogFactor = fogFactor * ( 1.0 - clamp( ( camH - 5.0 ) / 8.0, 0.0, 1.0 ) );\n  color = mix( color, vec3( 0, 0, 0 ), fogFactor );\n\n\n  gl_FragColor = vec4(color, 1.0);\n}";

export { Fragment };
